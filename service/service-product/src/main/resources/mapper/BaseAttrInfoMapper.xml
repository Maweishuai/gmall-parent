<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper SYSTEM "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<!--属性namespace 接口全路径-->
<mapper namespace="com.atguigu.gmall.product.mapper.BaseAttrInfoMapper">
    <!--
        resultMap：表示返回的映射结果集，放入的是与返回值类型对应的属性
        id ： 表示resultMap的唯一标识，自己起名
        type：表示返回结果集的数据类型，也就是集合的泛型
        autoMapping : 自动映射
    -->
    <resultMap id="baseAttrInfoMap" type="com.atguigu.gmall.model.product.BaseAttrInfo" autoMapping="true">
        <!--id标签 表示主键字段
        property：表示实体类的属性名 column：表示通过sql 执行以后查询出来的字段名-->
        <id property="id" column="id"></id>
        <!--result标签 表示普通字段
            当字段较多时，代码冗余，可以用自动映射autoMapping="true" -->
        <!--  <result property="" column=""></result>
                        ...      ...                  -->
        <!-- private List<BaseAttrValue> attrValueList;
            是平台属性值集合；
            但在实体类中这个是非数据库字段，所以无法自动映射
            平台属性：平台属性值是 1：n的关系   所以用collection标签
                             如果是 n:1的关系 则用association标签-->
        <!--  private List<BaseAttrValue> attrValueList
             property :放实体类中的属性名
             ofType : 返回的数据类型,也就是集合的泛型-->
        <collection property="attrValueList" ofType="com.atguigu.gmall.model.product.BaseAttrValue" autoMapping="true">
            <!--  平台属性值中 有个主键-->
            <!--   sql 语句中如果有重名的Id ，那么必须要起个别名-->
            <id property="id" column="attr_value_id"></id>
        </collection>
    </resultMap>
    <!--select 中执行的sql 语句。-->
    <select id="selectBaseAttrInfoList" resultMap="baseAttrInfoMap">
        select
            bai.id,
            bai.attr_name,
            bai.category_id,
            bai.category_level,
            bav.id attr_value_id,
            bav.value_name,
            bav.attr_id
        from base_attr_info bai
        inner join base_attr_value bav
        on bai.id=bav.attr_id
        <where>
            <if test="category1Id!=null and category1Id!=0">
                or (bai.category_id=#{category1Id} and bai.category_level=1)
            </if>
            <if test="category2Id!=null and category2Id!=0">
                or (bai.category_id=#{category2Id} and bai.category_level=2)
            </if>
            <if test="category3Id!=null and category3Id!=0">
                or (bai.category_id=#{category3Id} and bai.category_level=3)
            </if>
        </where>
        order by bai.id,bai.category_level
    </select>

    <select id="selectBaseAttrInfoListBySkuId" resultMap="baseAttrInfoMap">
    SELECT
        bai.id,
        bai.attr_name,
        bai.category_id,
        bai.category_level,
        bav.id attr_value_id,
        bav.value_name,
        bav.attr_id
    FROM
    base_attr_info bai
    INNER JOIN base_attr_value bav ON bai.id = bav.attr_id
    INNER JOIN sku_attr_value sav ON sav.value_id = bav.id
    WHERE
    sav.sku_id = #{skuId}
    </select>
</mapper>